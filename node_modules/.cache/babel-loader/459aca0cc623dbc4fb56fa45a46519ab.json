{"ast":null,"code":"var _jsxFileName = \"E:\\\\BaiduNetdiskDownload\\\\studyreact\\\\src\\\\day3\\\\2_\\u5B50\\u7236\\u7EC4\\u4EF6.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport propTypes from 'prop-types'; // 专门用来处理传进来的数据的情况\n//限制传进来的数据的情况\n// 一般当我们去创造一些复用性组件的时候才会选择使用限制\n// 父组件使用子组件的数据 父组件把一个函数作为props传递给子组件，子组件调用时传递参数给函数 借此实现子传父\n\nclass Button extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: 'bayd'\n    };\n\n    this.click = () => {\n      this.props.onClick && this.props.onClick(); // 事件存在则执行\n\n      this.props.qqq && this.props.qqq(this.state.name);\n    };\n  }\n\n  render() {\n    console.log(this);\n    let {\n      className = 'qqq',\n      children = '按钮'\n    } = this.props; // children 对应的就是 组件标签 包含的所有内容；\n    // 有三种情况 字符窜(纯文本) 数组(多个子节点) 对象(单个节点)\n\n    let str = 'hello';\n    let arry = ['haha', /*#__PURE__*/React.createElement(\"i\", {\n      key: \"123\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 28\n      }\n    }, \"hehehe\")];\n    let b = /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, \"hhhh\");\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: className,\n      onClick: this.click,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }\n    }, children, str, arry, b);\n  }\n\n} // Button.defaultProps = {}   等同于 static defaultProps = {}\n\n\nButton.propTypes = {\n  // className:propTypes.string // className 必须是一个字符窜\n  className: propTypes.oneOfType([propTypes.string, propTypes.number]) // 满足两个类型条件中的其中一个\n\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '你好',\n      className: 'box'\n    };\n\n    this.qqq = name => {\n      this.setState({\n        name: name\n      });\n      console.log(this.state.name);\n    };\n  }\n\n  fn() {\n    this.setState({\n      name: '你好！welcome'\n    });\n  }\n\n  render() {\n    //Button组件就是App组件的子组件 App 就是Button组件的父组件\n    let {\n      name,\n      className\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.fn();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, \"addss\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.fn.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"menu1\"), /*#__PURE__*/React.createElement(Button, {\n      className: className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, \"menu2\"), /*#__PURE__*/React.createElement(Button, {\n      className: 666,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"menu3\"), /*#__PURE__*/React.createElement(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, \"\\u4F60\\u597D\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 23\n      }\n    }, \"haha\")), /*#__PURE__*/React.createElement(Button, {\n      qqq: this.qqq,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 36\n      }\n    }, \"haha\")), \"App\\u6839\\u7EC4\\u4EF6\\uFF1A\", name);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["E:/BaiduNetdiskDownload/studyreact/src/day3/2_子父组件.js"],"names":["React","Component","ReactDOM","propTypes","Button","state","name","click","props","onClick","qqq","render","console","log","className","children","str","arry","b","oneOfType","string","number","App","setState","fn","bind","document","getElementById"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport propTypes from 'prop-types' // 专门用来处理传进来的数据的情况\r\n\r\n//限制传进来的数据的情况\r\n// 一般当我们去创造一些复用性组件的时候才会选择使用限制\r\n// 父组件使用子组件的数据 父组件把一个函数作为props传递给子组件，子组件调用时传递参数给函数 借此实现子传父\r\n\r\nclass Button extends Component{\r\n    static propTypes = {\r\n        // className:propTypes.string // className 必须是一个字符窜\r\n        className:propTypes.oneOfType([\r\n            propTypes.string,\r\n            propTypes.number\r\n        ])// 满足两个类型条件中的其中一个\r\n        \r\n    }\r\n\r\n    // static defaultProps = {\r\n    //     // 给默认值的\r\n    //     className:'more'\r\n    // }\r\n    state = {\r\n        name:'bayd'\r\n    }\r\n    click=()=>{\r\n        this.props.onClick && this.props.onClick() // 事件存在则执行\r\n        this.props.qqq && this.props.qqq(this.state.name)\r\n    }\r\n    render(){\r\n        console.log(this)\r\n        let {className = 'qqq',children='按钮'} = this.props;\r\n        // children 对应的就是 组件标签 包含的所有内容；\r\n        // 有三种情况 字符窜(纯文本) 数组(多个子节点) 对象(单个节点)\r\n        let str = 'hello'\r\n        let arry = ['haha',<i key='123'>hehehe</i>]\r\n        let b = <b>hhhh</b>\r\n        return <button className={className} onClick={this.click}>{children}{str}{arry}{b}</button>\r\n    }\r\n}\r\n// Button.defaultProps = {}   等同于 static defaultProps = {}\r\nclass App extends React.Component{\r\n    state = {\r\n        name:'你好',\r\n        className:'box'\r\n    }\r\n    fn(){\r\n        this.setState({\r\n            name:'你好！welcome'\r\n        })\r\n    }\r\n    qqq=(name)=>{\r\n        this.setState({\r\n            name:name\r\n        })\r\n        console.log(this.state.name)\r\n    }\r\n    render(){\r\n        //Button组件就是App组件的子组件 App 就是Button组件的父组件\r\n        let {name,className} = this.state;\r\n        return <div className=\"\">\r\n            <button onClick={()=>{this.fn()}}>addss</button>\r\n            <Button onClick={this.fn.bind(this)}>menu1</Button>\r\n            <Button className={className}>menu2</Button>\r\n            <Button className={666}>menu3</Button>\r\n            <Button>你好<i>haha</i></Button>\r\n            {/*子组件向父组件传参 */}\r\n            <Button qqq={this.qqq}><i>haha</i></Button>\r\n            App根组件：{name}\r\n        </div>\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}