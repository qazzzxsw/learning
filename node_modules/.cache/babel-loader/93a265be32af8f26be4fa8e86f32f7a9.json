{"ast":null,"code":"var _jsxFileName = \"F:\\\\react\\\\learning\\\\studyreact\\\\src\\\\day5\\\\store\\\\myreactRedux.js\";\n//Provider组件         connect高阶函数\nimport React from 'react';\nimport types from 'prop-types'; //Provider负责 接收store并且创造上下文\n//Provider 现在是一个真正的根组件 在它的身上创造上下文 所有的组件能获取到\n\nexport class Provider extends React.Component {\n  getChildContext() {\n    return {\n      store: this.props.store\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children);\n  }\n\n}\nProvider.childContextTypes = {\n  store: types.object\n};\nexport function connect(mapStateToProps, mapDispatchToProps) {\n  return function (Com) {\n    var _class, _temp;\n\n    return _temp = _class = class Temp extends React.Component {\n      constructor(props, context) {\n        super(props, context);\n        console.log(props, context);\n        let data = context.store.getState(); //通过 上下文 获取 根组件设置的store属性\n\n        this.state = mapStateToProps(data); //就把mapStateToPorps的返回结果变成这个临时组建的私有状态\n      }\n\n      componentDidMount() {\n        this.qqq = this.context.store.subscribe(() => {\n          //数据更新 是redux数据更新了 但是state的数据没有更新\n          let data = this.context.store.getState();\n          console.log(data);\n          this.state = mapStateToProps(data); //以上两行代码 是state中的数据更新了\n\n          console.log(this.state); //更新视图\n\n          this.setState(this.state); // this.setState({})\n          //写空对象 我们之前是 吧state中的某个数据更改了 可以这样写\n          //但是现在是整个state的替换 用空对象的时候react还是用自己缓存的老对象合并的\n        });\n      }\n\n      componentWillUnmount() {\n        //有多少组件使用了 connect 那么就有多少事件放到事件池中\n        //我们不能一直存 不移除 可以用subscribe返回的回调函数执行的方式移除\n        this.qqq();\n      }\n\n      render() {\n        let disObj = mapDispatchToProps && mapDispatchToProps(this.context.store.dispatch);\n        return /*#__PURE__*/React.createElement(Com, Object.assign({}, this.state, disObj, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 24\n          }\n        }));\n      }\n\n    }, _class.contextTypes = {\n      store: types.object\n    }, _temp;\n  };\n}","map":{"version":3,"sources":["F:/react/learning/studyreact/src/day5/store/myreactRedux.js"],"names":["React","types","Provider","Component","getChildContext","store","props","render","children","childContextTypes","object","connect","mapStateToProps","mapDispatchToProps","Com","Temp","constructor","context","console","log","data","getState","state","componentDidMount","qqq","subscribe","setState","componentWillUnmount","disObj","dispatch","contextTypes"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;AACA;;AAEA,OAAO,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAsC;AAIzCC,EAAAA,eAAe,GAAE;AACb,WAAO;AACHC,MAAAA,KAAK,EAAC,KAAKC,KAAL,CAAWD;AADd,KAAP;AAGH;;AACDE,EAAAA,MAAM,GAAE;AACJ,wBAAO,0CACN,KAAKD,KAAL,CAAWE,QADL,CAAP;AAGH;;AAbwC;AAAhCN,Q,CACFO,iB,GAAoB;AACvBJ,EAAAA,KAAK,EAACJ,KAAK,CAACS;AADW,C;AAe/B,OAAO,SAASC,OAAT,CAAiBC,eAAjB,EAAiCC,kBAAjC,EAAoD;AACvD,SAAO,UAASC,GAAT,EAAa;AAAA;;AAChB,4BAAO,MAAMC,IAAN,SAAmBf,KAAK,CAACG,SAAzB,CAAkC;AAIrCa,MAAAA,WAAW,CAACV,KAAD,EAAOW,OAAP,EAAe;AACtB,cAAMX,KAAN,EAAYW,OAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ,EAAkBW,OAAlB;AACA,YAAIG,IAAI,GAAGH,OAAO,CAACZ,KAAR,CAAcgB,QAAd,EAAX,CAHsB,CAItB;;AACA,aAAKC,KAAL,GAAaV,eAAe,CAACQ,IAAD,CAA5B,CALsB,CAMtB;AACH;;AACDG,MAAAA,iBAAiB,GAAE;AACf,aAAKC,GAAL,GAAW,KAAKP,OAAL,CAAaZ,KAAb,CAAmBoB,SAAnB,CAA6B,MAAI;AACxC;AACA,cAAIL,IAAI,GAAG,KAAKH,OAAL,CAAaZ,KAAb,CAAmBgB,QAAnB,EAAX;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,eAAKE,KAAL,GAAaV,eAAe,CAACQ,IAAD,CAA5B,CAJwC,CAKxC;;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAjB,EANwC,CAOxC;;AACA,eAAKI,QAAL,CAAc,KAAKJ,KAAnB,EARwC,CASxC;AACA;AACA;AACH,SAZU,CAAX;AAaH;;AACDK,MAAAA,oBAAoB,GAAE;AAClB;AACA;AACA,aAAKH,GAAL;AACH;;AACDjB,MAAAA,MAAM,GAAE;AACJ,YAAIqB,MAAM,GAAGf,kBAAkB,IAAIA,kBAAkB,CAAC,KAAKI,OAAL,CAAaZ,KAAb,CAAmBwB,QAApB,CAArD;AACA,4BAAO,oBAAC,GAAD,oBAAS,KAAKP,KAAd,EAAyBM,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACH;;AAnCoC,KAAzC,SACWE,YADX,GAC0B;AAClBzB,MAAAA,KAAK,EAACJ,KAAK,CAACS;AADM,KAD1B;AAqCH,GAtCD;AAuCH","sourcesContent":["//Provider组件         connect高阶函数\r\nimport React from 'react'\r\nimport types from 'prop-types'\r\n\r\n//Provider负责 接收store并且创造上下文\r\n//Provider 现在是一个真正的根组件 在它的身上创造上下文 所有的组件能获取到\r\n\r\nexport class Provider extends React.Component{\r\n    static childContextTypes = {\r\n        store:types.object\r\n    }\r\n    getChildContext(){\r\n        return {\r\n            store:this.props.store\r\n        }\r\n    }\r\n    render(){\r\n        return <>\r\n        {this.props.children}\r\n        </>\r\n    }\r\n}\r\n\r\nexport function connect(mapStateToProps,mapDispatchToProps){\r\n    return function(Com){\r\n        return class Temp extends React.Component{\r\n            static contextTypes = {\r\n                store:types.object\r\n            }\r\n            constructor(props,context){\r\n                super(props,context)\r\n                console.log(props,context)\r\n                let data = context.store.getState()\r\n                //通过 上下文 获取 根组件设置的store属性\r\n                this.state = mapStateToProps(data)\r\n                //就把mapStateToPorps的返回结果变成这个临时组建的私有状态\r\n            }\r\n            componentDidMount(){\r\n                this.qqq = this.context.store.subscribe(()=>{\r\n                    //数据更新 是redux数据更新了 但是state的数据没有更新\r\n                    let data = this.context.store.getState()\r\n                    console.log(data)\r\n                    this.state = mapStateToProps(data)\r\n                    //以上两行代码 是state中的数据更新了\r\n                    console.log(this.state)\r\n                    //更新视图\r\n                    this.setState(this.state) \r\n                    // this.setState({})\r\n                    //写空对象 我们之前是 吧state中的某个数据更改了 可以这样写\r\n                    //但是现在是整个state的替换 用空对象的时候react还是用自己缓存的老对象合并的\r\n                })\r\n            }\r\n            componentWillUnmount(){\r\n                //有多少组件使用了 connect 那么就有多少事件放到事件池中\r\n                //我们不能一直存 不移除 可以用subscribe返回的回调函数执行的方式移除\r\n                this.qqq()\r\n            }\r\n            render(){\r\n                let disObj = mapDispatchToProps && mapDispatchToProps(this.context.store.dispatch)\r\n                return <Com {...this.state} {...disObj}/>\r\n            }\r\n        }   \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}