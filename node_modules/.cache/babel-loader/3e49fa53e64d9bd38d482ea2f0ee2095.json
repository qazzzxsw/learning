{"ast":null,"code":"var _jsxFileName = \"E:\\\\BaiduNetdiskDownload\\\\studyreact\\\\src\\\\day2\\\\_class\\u7EC4\\u4EF6.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconsole.log(React.Component); // 在class组建中 我们的结构是通过render函数的返回结果确定的\n\nclass App extends React.Component {\n  // 创造一个APP类 继承React.ComPonent这个类\n  // 在render中 我们不用管是否写了constructor；都可以正常通过this.props调用到我们的属性\n  constructor(props) {\n    // 在class声明类的时候 有一个规定\n    // 写了constructor 辟邪super()--->super相当于我们的call，继承super其实就是继承的那个类的函数体本省React.Component\n    super(props);\n    console.log(props);\n  }\n\n  fn() {\n    console.log(this.props);\n  }\n\n  render() {\n    console.log(this.props);\n    let aaa = this.props.id; // this.props中的属性 是只读对的 不能修改；\n\n    aaa = 1111;\n    this.fn();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 16\n      }\n    }, \"1111111111\");\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  className123: \"box\",\n  id: \"666\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["E:/BaiduNetdiskDownload/studyreact/src/day2/_class组件.js"],"names":["React","ReactDOM","console","log","Component","App","constructor","props","fn","render","aaa","id","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACAC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,SAAlB,E,CAEA;;AACA,MAAMC,GAAN,SAAkBL,KAAK,CAACI,SAAxB,CAAiC;AAC7B;AACA;AACAE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;AACA;AACA,UAAMA,KAAN;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH;;AACDC,EAAAA,EAAE,GAAE;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAjB;AACH;;AACDE,EAAAA,MAAM,GAAE;AACJP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAjB;AACA,QAAIG,GAAG,GAAG,KAAKH,KAAL,CAAWI,EAArB,CAFI,CAGJ;;AACAD,IAAAA,GAAG,GAAG,IAAN;AACA,SAAKF,EAAL;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AAnB4B;;AAqBjCP,QAAQ,CAACQ,MAAT,eAAgB,oBAAC,GAAD;AAAK,EAAA,YAAY,EAAC,KAAlB;AAAwB,EAAA,EAAE,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAoDG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApD","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nconsole.log(React.Component)\r\n\r\n// 在class组建中 我们的结构是通过render函数的返回结果确定的\r\nclass App extends React.Component{\r\n    // 创造一个APP类 继承React.ComPonent这个类\r\n    // 在render中 我们不用管是否写了constructor；都可以正常通过this.props调用到我们的属性\r\n    constructor(props){\r\n        // 在class声明类的时候 有一个规定\r\n        // 写了constructor 辟邪super()--->super相当于我们的call，继承super其实就是继承的那个类的函数体本省React.Component\r\n        super(props)\r\n        console.log(props)\r\n    }\r\n    fn(){\r\n        console.log(this.props)\r\n    }\r\n    render(){\r\n        console.log(this.props)\r\n        let aaa = this.props.id;\r\n        // this.props中的属性 是只读对的 不能修改；\r\n        aaa = 1111;\r\n        this.fn()\r\n        return <div>1111111111</div>\r\n    }\r\n}\r\nReactDOM.render(<App className123='box' id='666' />,document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}